"""
Sphinx extension for viewing feature toggle annotations.
"""
import os

import pkg_resources
import yaml
from code_annotations.base import AnnotationConfig
from code_annotations.find_static import StaticSearch

from docutils import nodes
from sphinx.util.docutils import SphinxDirective


def find_feature_toggles(source_path):
    """
    Find the feature toggles as defined in the configuration file.

    Return:
        toggles (dict): feature toggles indexed by name.
    """
    config_path = pkg_resources.resource_filename(
        "edx_toggles", "feature_toggle_annotations.yaml"
    )
    config = AnnotationConfig(
        config_path, verbosity=0, source_path_override=source_path
    )
    results = StaticSearch(config).search()

    toggles = {}
    current_entry = {}
    for filename, entries in results.items():
        for entry in entries:
            key = entry["annotation_token"]
            value = entry["annotation_data"]
            if key == ".. toggle_name:":
                toggle_name = value
                toggles[toggle_name] = {
                    "filename": entry["filename"],
                    "line_number": entry["line_number"],
                }
                current_entry = toggles[toggle_name]
            else:
                current_entry[key] = value

    return toggles


class FeatureToggles(SphinxDirective):
    """
    Sphinx directive to list the feature toggles in a single documentation page.

    Use this directive as follows::

        .. featuretoggles::

    This directive supports the following configuration parameters:

    - ``featuretoggles_source_path``: absolute path to the repository file tree. E.g:

        featuretoggles_source_path = os.path.join(os.path.dirname(__file__), "..", "..")

    - ``featuretoggles_repo_url``: Github repository where the code is hosted. E.g:

        featuretoggles_repo_url = "https://github.com/edx/myrepo"

    - ``featuretoggles_repo_version``: current version of the git repository. E.g:

        import git
        try:
            repo = git.Repo(search_parent_directories=True)
            featuretoggles_repo_version = repo.head.object.hexsha
        except git.InvalidGitRepositoryError:
            featuretoggles_repo_version = "master"
    """

    required_arguments = 0
    optional_arguments = 0
    option_spec = {}

    def run(self):
        toggle_nodes = list(self.iter_nodes())
        return [nodes.section("", *toggle_nodes, ids=["featuretoggles"])]

    def iter_nodes(self):
        """
        Iterate on the docutils nodes generated by this directive.
        """
        toggles = find_feature_toggles(self.env.config.featuretoggles_source_path)
        for toggle_name in sorted(toggles):
            toggle = toggles[toggle_name]
            yield nodes.title(text=toggle_name)
            toggle_default_value = toggle.get(".. toggle_default:", "Not defined")
            toggle_default_node = nodes.literal(text=quote_value(toggle_default_value))
            yield nodes.paragraph("", "Default: ", toggle_default_node)
            yield nodes.paragraph(
                "",
                "Source: ",
                nodes.reference(
                    text="{} (line {})".format(
                        toggle["filename"], toggle["line_number"]
                    ),
                    refuri="{}/blob/{}/{}#L{}".format(
                        self.env.config.featuretoggles_repo_url,
                        self.env.config.featuretoggles_repo_version,
                        toggle["filename"],
                        toggle["line_number"],
                    ),
                ),
            )
            yield nodes.paragraph(text=toggle.get(".. toggle_description:", ""))


def quote_value(value):
    """
    Quote a Python object if it is string-like.
    """
    if value in ("True", "False", "None"):
        return str(value)
    try:
        float(value)
        return str(value)
    except ValueError:
        pass
    if isinstance(value, str):
        return '"{}"'.format(value)
    return str(value)


def setup(app):
    """
    Utility function to declare the Sphinx extension.
    """
    app.add_config_value(
        "featuretoggles_source_path", os.path.abspath(".."), "env",
    )
    app.add_config_value("featuretoggles_repo_url", "", "env")
    app.add_config_value("featuretoggles_repo_version", "master", "env")
    app.add_directive("featuretoggles", FeatureToggles)

    return {
        "version": "0.1",
        "parallel_read_safe": True,
        "parallel_write_safe": True,
    }
